diff --git a/src/minecraft/net/minecraft/src/TileEntityFurnace.java b/src/minecraft/net/minecraft/src/TileEntityFurnace.java
index f28d825..80500ad 100644
--- a/src/minecraft/net/minecraft/src/TileEntityFurnace.java
+++ b/src/minecraft/net/minecraft/src/TileEntityFurnace.java
@@ -20,0 +21,2 @@ public class TileEntityFurnace extends TileEntity implements ISidedInventory
+    public int currentItemID = 0;
+    public boolean emptyResultSlot = false;
@@ -273 +275,3 @@ public class TileEntityFurnace extends TileEntity implements ISidedInventory
-            if (this.isBurning() && this.canSmelt())
+            boolean shouldUpdate = checkForChange();
+
+            if (this.isBurning() && this.canSmelt() && (this.furnaceItemStacks[0].itemID == this.currentItemID))
@@ -286 +290,9 @@ public class TileEntityFurnace extends TileEntity implements ISidedInventory
-                this.furnaceCookTime = 0;
+                if (this.canSmelt() && (this.furnaceItemStacks[0].itemID == this.currentItemID))
+                {
+                    this.furnaceCookTime = Math.max(this.furnaceCookTime - 1, 0);
+                }
+                else
+                {
+                    setCurrentItemID();
+                    this.furnaceCookTime = 0;
+                }
@@ -292 +304,6 @@ public class TileEntityFurnace extends TileEntity implements ISidedInventory
-                BlockFurnace.updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
+                shouldUpdate = true;
+            }
+
+            if (shouldUpdate)
+            {
+                BlockFurnace.updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord, this.furnaceItemStacks[0] != null || this.furnaceItemStacks[2] != null);
@@ -301,0 +319,22 @@ public class TileEntityFurnace extends TileEntity implements ISidedInventory
+    private boolean checkForChange()
+    {
+        boolean shouldUpdate = false;
+        if ((currentItemID == 0) != (furnaceItemStacks[0] == null))
+        {
+            shouldUpdate = true;
+            setCurrentItemID();
+        }
+
+        if (emptyResultSlot != (furnaceItemStacks[2] == null))
+        {
+            shouldUpdate = true;
+            emptyResultSlot = (furnaceItemStacks[2] == null);
+        }
+        return shouldUpdate;
+    }
+
+    private void setCurrentItemID()
+    {
+        currentItemID = (furnaceItemStacks[0] == null) ? 0 : furnaceItemStacks[0].itemID;
+    }
+
